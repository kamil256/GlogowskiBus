@model GlogowskiBus.UI.Models.HomeBusPositionsViewModel

@{ 
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Autobusy i przystanki";
}

<div id="showHideLines">
    <p>Pokaż/ukryj linie:</p>
    <ul id="busLinesTiles">
    </ul>
    <p>
        <span class="textButton">Pokaż wszystkie</span> | <span class="textButton">Ukryj wszystkie</span>
    </p>
</div>

@*<hr />

<div id="lineDetails">
    <p>
        Szczegóły linii:
    </p>
    <select class="form-control">
        <option>Linia: A, Trasa: Wojska Polskiego II &rarr; Dworzec Główny PKP</option>
        <option>50</option>
        <option>57</option>
        <option>61</option>
    </select>
</div>*@

<script>
    var busLines;
    var selectedLine = 
    {
        lines: [],
        update: function(lineNumber)
        {
            for (var i = 0; i < selectedLine.lines.length; i++)
                selectedLine.lines[i].setMap(null);

            if (lineNumber)
                for (var i = 0; i < busLines.length; i++)
                    if (busLines[i].BusNumber === lineNumber)
                    {
                        for (var j = 0; j < busLines[i].Routes[0].Points.length - 1; j++)
                        {
                            selectedLine.lines.push(new google.maps.Polyline(
                            {
                                map: map,
                                path: [new google.maps.LatLng(busLines[i].Routes[0].Points[j].Latitude, busLines[i].Routes[0].Points[j].Longitude), new google.maps.LatLng(busLines[i].Routes[0].Points[j + 1].Latitude, busLines[i].Routes[0].Points[j + 1].Longitude)],
                                geodesic: true,
                                strokeColor: '#FF6A00',
                                strokeOpacity: 1,
                                strokeWeight: 5,
                            }));
                        }
                        break;
                    }
        }
    };

    var ExistingBusStops =
    {
        markers: [],
        initialize: function()
        {
            var busStops = @Html.Raw(Json.Encode(@Model.BusStops));
            for (var i = 0; i < busStops.length; i++)
            {
                ExistingBusStops.markers.push(new google.maps.Marker(
                {
                    icon: OrangeBusStopMarkerImage,
                    map: map,
                    optimized: false,
                    position:
                    {
                        lat: busStops[i].Latitude,
                        lng: busStops[i].Longitude
                    },
                    zIndex: 0
                }));

                ExistingBusStops.markers[i].addListener('click', function(e)
                {
                    
                });
            }
        }
    };

    function refreshBusLinesTiles()
    {
        var busLinesTiles = document.getElementById('busLinesTiles');
        while (busLinesTiles.firstChild)
            busLinesTiles.removeChild(busLinesTiles.firstChild);
        for (var i = 0; i < busLines.length; i++)
        {
            var tile = document.createElement('li');
            if (busLines[i].show === true)
                tile.className = 'active';
            tile.textContent = busLines[i].BusNumber;
            tile.onclick = function(i)
            {
                for (var i = 0; i < busLines.length; i++)
                    if (busLines[i].BusNumber === this.textContent)
                    {
                        busLines[i].show = !busLines[i].show;
                        refreshBusLinesTiles();
                        break;
                    }
            };
            busLinesTiles.appendChild(tile);
        }
    }

    function getPositionBetweenTwoPoints(startPoint, endPoint, currentTimeOffset)
    {
        var latitudeDifference = endPoint.Latitude - startPoint.Latitude;
        var longitudeDifference = endPoint.Longitude - startPoint.Longitude;
        var timeRatio = (currentTimeOffset - startPoint.TimeOffset) / (endPoint.TimeOffset - startPoint.TimeOffset);
        var newPointLatitude = startPoint.Latitude + latitudeDifference * timeRatio;
        var newPointLongitude = startPoint.Longitude + longitudeDifference * timeRatio;
        return new google.maps.LatLng(newPointLatitude, newPointLongitude);
    }

    function Bus(busNumberParam, pointsParam, startTimeOffset, departureHoursParam, departureMinutesParam)
    {
        var self = this;

        self.busNumber = busNumberParam;

        self.points = pointsParam;

        self.departureHours = departureHoursParam;

        self.departureMinutes = departureMinutesParam;

        var marker = new google.maps.Marker(
        {
            label: self.busNumber,
            map: map,
            position:
            {
                lat: self.points[0].Latitude,
                lng: self.points[0].Longitude
            }
        });
        marker.addListener('click', function(e)
        {
            selectedLine.update(self.busNumber);
        });
        var timeOffset = startTimeOffset;

        var refresh = function()
        {
            for (var i = 0; i < busLines.length; i++)
                if (busLines[i].BusNumber === self.busNumber)
                {
                    if (busLines[i].show === true && marker.getMap() === null)
                        marker.setMap(map);
                    else if (busLines[i].show === false && marker.getMap() != null)
                        marker.setMap(null);
                    break;
                }

            if (timeOffset > self.points[self.points.length - 1].TimeOffset)
            {
                marker.setMap(null);
                buses.splice(buses.indexOf(self), 1);
            }
            else
            {
                for (var k = 0; k < self.points.length - 1; k++)
                {

                    if ((timeOffset >= self.points[k].TimeOffset && timeOffset < self.points[k + 1].TimeOffset))
                    {
                        var newPosition = getPositionBetweenTwoPoints(self.points[k], self.points[k + 1], timeOffset);
                        marker.setPosition(newPosition);
                        break;
                    }
                }
                setTimeout(refresh, 100);
                timeOffset += 100;
            }
        }

        refresh();
    }

    var buses = [];

    function refreshBuses()
    {
        for (var i = 0; i < busLines.length; i++)
        {
            for (var r = 0; r < busLines[i].Routes.length; r++)
            {
                for (var j = 0; j < busLines[i].Routes[r].DepartureTimes.length; j++)
                {
                    var departureHours = busLines[i].Routes[r].DepartureTimes[j].Hours;
                    var departureMinutes = busLines[i].Routes[r].DepartureTimes[j].Minutes;
                    var now = new Date();
                    var departureTotalMilliseconds =  new Date(now.getFullYear(), now.getMonth(), now.getDate(), departureHours, departureMinutes, 0).getTime();
                    var arrivalTotalMilliseconds =  departureTotalMilliseconds + busLines[i].Routes[r].Points[busLines[i].Routes[r].Points.length - 1].TimeOffset;
                    if (serverTime.getTotalMilliseconds() >= departureTotalMilliseconds && serverTime.getTotalMilliseconds() < arrivalTotalMilliseconds)
                    {
                        var busAdded = false;
                        for (var k = 0; k < buses.length; k++)
                        {
                            if (buses[k].busNumber === busLines[i].BusNumber && buses[k].departureHours === departureHours && buses[k].departureMinutes === departureMinutes)
                            {
                                busAdded = true;
                                break;
                            }
                        }
                        if (!busAdded)
                        {
                            buses.push(new Bus(busLines[i].BusNumber, busLines[i].Routes[r].Points, serverTime.getTotalMilliseconds() - departureTotalMilliseconds, departureHours, departureMinutes));
                        }
                    }
                }
            }
        }
    }

    function ServerTime()
    {
        var self = this;

        var totalMilliseconds = Number(@Model.ServerTimeMilliseconds);

        self.getHours = function()
        {
            return new Date(totalMilliseconds).getHours();
        }

        self.getMinutes = function()
        {
            return new Date(totalMilliseconds).getMinutes();
        }

        self.getSeconds = function()
        {
            return new Date(totalMilliseconds).getSeconds();
        }

        self.getTotalMilliseconds = function()
        {
            return totalMilliseconds;
        }

        var tick = function()
        {
            setTimeout(tick, 1000);
            totalMilliseconds += 1000;
            if (self.getSeconds() === 0)
            {
                refreshBuses();
            }
        }

        tick();
    }

    var serverTime;

    window.onload = function()
    {
        GrayBusStopMarkerImage = new google.maps.MarkerImage
        (
            '/Content/Images/gray_busstop.png',
            new google.maps.Size(24, 24),
            new google.maps.Point(0, 0),
            new google.maps.Point(12, 12)
        );

        OrangeBusStopMarkerImage = new google.maps.MarkerImage
        (
            '/Content/Images/orange_busstop2.png',
            new google.maps.Size(24, 24),
            new google.maps.Point(0, 0),
            new google.maps.Point(12, 12)
        );

        OrangeCircleMarkerImage = new google.maps.MarkerImage
        (
            '/Content/Images/orange_circle.png',
            new google.maps.Size(12, 12),
            new google.maps.Point(0, 0),
            new google.maps.Point(6, 6)
        );

        ExistingBusStops.initialize();



        busLines = @Html.Raw(Json.Encode(@Model.BusLines));

        for (var i = 0; i < busLines.length; i++)
            busLines[i].show = true;
        refreshBusLinesTiles();

        serverTime = new ServerTime();
        refreshBuses();

        map.addListener('click', function(e)
        {
            selectedLine.update(null);    
        });
    }
</script>