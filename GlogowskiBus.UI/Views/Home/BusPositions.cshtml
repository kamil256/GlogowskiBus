@model GlogowskiBus.UI.Models.HomeBusPositionsViewModel

@{ 
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Autobusy i przystanki";
}

@*<div id="navigation" data-bind="visible: view() == 'Navigation'">
    <p>Pokaż/ukryj linie:</p>
    <ul id="busLinesTiles" data-bind="foreach: busLines">
        <li data-bind="click: function() { hidden(!hidden()); }, css: { active: !hidden() }, text: busNumber"></li>
    </ul>
    <p>
        <span class="textButton">Pokaż wszystkie</span> | <span class="textButton">Ukryj wszystkie</span>
    </p>
</div>

<div id="findRoute" data-bind="visible: view() == 'FindRoute'">
</div>*@

<div id="timeTable" data-bind="visible: tab() == 'ROZKŁAD JAZDY'">
    <p>PRZYSTANEK</p>
    <select class="form-control" data-bind="options: busStops, optionsText: 'name', optionsCaption: '-', value: actualSelection.busStop"></select>
    <br />

    <!-- ko if: actualSelection.busStop() -->
    <p>LINIA</p>
    <ul id="busLinesTiles" data-bind="foreach: busLines">
        <li data-bind="click: function() { $root.actualSelection.departureTime($root.departureTimes.getNextDepartureTime($data)) }, css: { active: $root.actualSelection.departureTime() && $root.actualSelection.departureTime().route.busLine == $data }, text: busNumber"></li>
    </ul>
    <!-- /ko -->

    <!-- ko if: actualSelection.busStop() && actualSelection.departureTime() -->
    <ul class="dayOfWeek" data-bind="foreach: daysOfWeek">
        <li data-bind="css: { active: $data == $root.actualSelection.selectedDayOfWeek() }, click: function(data, event) { $root.actualSelection.selectedDayOfWeek($data); }, text: $data"></li>
    </ul>
        
    <table cellspacing="0" class="timeTable">
        <tr>
            <td>
                <table class="busStops" data-bind="foreach: actualSelection.busStops()">
                    <tr>
                        <td data-bind="css: { active: timeOffset == 0 }, text: timeOffset == 0 ? timeOffset : (timeOffset > 0 ? '+' + timeOffset : '')"></td>
                        <td data-bind="click: function(data, event) { $root.actualSelection.busStop($root.actualSelection.departureTime().route.busStops[$index()]); }, css: { active: timeOffset == 0 }, text: name"></td>
                    </tr>
                </table>
            </td>

            <td>
                <table class="departureTimes" data-bind="foreach: actualSelection.departureTimes()">
                    <tr data-bind="visible: $root.actualSelection.departureTimes()[$index()].length > 0">
                        <td>
                            <div data-bind="text: $index"></div>
                        </td>
                        <td data-bind="foreach: $root.actualSelection.departureTimes()[$index()]">
                            <div data-bind="attr: { title: details }, click: function(data, event) { $root.actualSelection.setDepartureTime(data, event); }, css: { active: $data.active }">
                                <span data-bind="text: $data.minutes < 10 ? '0' + $data.minutes : $data.minutes"></span><sub data-bind="text: $data.indexMark"></sub>
                            </div>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>

    <!-- /ko -->
</div>

<script>
    function ServerTime()
    {
        var self = this;

        var serverTime = Number(@Model.ServerTimeMilliseconds);

        var timeDifference = serverTime - new Date().getTime();

        self.now = function()
        {
            return new Date(new Date().getTime() + timeDifference);
        };
    }

    function getPositionBetweenTwoPoints(startPoint, endPoint, currentTimeOffset)
    {
        var latitudeDifference = endPoint.latitude - startPoint.latitude;
        var longitudeDifference = endPoint.longitude - startPoint.longitude;
        var timeRatio = (currentTimeOffset - startPoint.timeOffset) / (endPoint.timeOffset - startPoint.timeOffset);
        var newPointLatitude = startPoint.latitude + latitudeDifference * timeRatio;
        var newPointLongitude = startPoint.longitude + longitudeDifference * timeRatio;
        return new google.maps.LatLng(newPointLatitude, newPointLongitude);
    }

    window.onload = function()
    {
        serverTime = new ServerTime();
        markerIcons = new MarkerIcons();

        context = new Context(@Html.Raw(Json.Encode(@Model.BusStops)), @Html.Raw(Json.Encode(@Model.BusLines)));
        ko.applyBindings(context);

        map.addListener('click', function(e)
        {
            //context.busStops.activeBusStop(null);
            //context.departureTimes.selectedDepartureTime(null);

            context.actualSelection.busStop(null);
            context.actualSelection.departureTime(null);
        });
    }
</script>