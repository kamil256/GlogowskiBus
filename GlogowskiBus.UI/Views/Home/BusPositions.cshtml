@model GlogowskiBus.UI.Models.HomeBusPositionsViewModel

@{ 
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Autobusy i przystanki";
}

<div id="navigation" data-bind="visible: view() == 'Navigation'">
    <p>Pokaż/ukryj linie:</p>
    <ul id="busLinesTiles" data-bind="foreach: busLines">
        <li data-bind="click: function() { hidden(!hidden()); }, css: { active: !hidden() }, text: busNumber"></li>
    </ul>
    <p>
        <span class="textButton">Pokaż wszystkie</span> | <span class="textButton">Ukryj wszystkie</span>
    </p>
</div>

<div id="findRoute" data-bind="visible: view() == 'FindRoute'">
</div>

<div id="schedule" data-bind="visible: view() == 'Schedule'">
    <p>Przystanek:</p>
    <select class="form-control" data-bind="options: busStops, optionsText: 'name', optionsCaption: '-', value: busStops.activeBusStop"></select>
    <br />
    <!-- ko if: busStops.activeBusStop() -->
        <p>Linia:</p>
        <ul id="busLinesTiles" data-bind="foreach: busStops.activeBusStop().points">
            <li data-bind="click: function() { $root.busLines.selectedBusLine(route.busLine) }, css: { active: $root.busLines.selectedBusLine() == route.busLine }, text: route.busLine.busNumber"></li>
        </ul>
    <!-- /ko -->
</div>

<script>
    function ServerTime()
    {
        var self = this;

        var serverTime = Number(@Model.ServerTimeMilliseconds);

        var timeDifference = serverTime - new Date().getTime();

        self.now = function()
        {
            return new Date(new Date().getTime() + timeDifference);
        };
    }

    function getPositionBetweenTwoPoints(startPoint, endPoint, currentTimeOffset)
    {
        var latitudeDifference = endPoint.latitude - startPoint.latitude;
        var longitudeDifference = endPoint.longitude - startPoint.longitude;
        var timeRatio = (currentTimeOffset - startPoint.timeOffset) / (endPoint.timeOffset - startPoint.timeOffset);
        var newPointLatitude = startPoint.latitude + latitudeDifference * timeRatio;
        var newPointLongitude = startPoint.longitude + longitudeDifference * timeRatio;
        return new google.maps.LatLng(newPointLatitude, newPointLongitude);
    }

    window.onload = function()
    {
        serverTime = new ServerTime();
        markerIcons = new MarkerIcons();

        /*var*/ context = new Context(@Html.Raw(Json.Encode(@Model.BusStops)), @Html.Raw(Json.Encode(@Model.BusLines)));
        ko.applyBindings(context);

        map.addListener('click', function(e)
        {
            context.busStops.activeBusStop(null);
            context.routes.hideAll();
        });
    }
</script>