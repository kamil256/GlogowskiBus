@model GlogowskiBus.UI.Models.HomeBusPositionsViewModel

@{ 
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Autobusy i przystanki";
}

<div id="showHideLines">
    <p>Pokaż/ukryj linie:</p>
    <ul id="busLinesTiles">
        @for (int i = 0; i < Model.BusLines.Count; i++)
        {
            <li class="active" onclick="showHideBuses(this, '@Model.BusLines[i].BusNumber')">@Model.BusLines[i].BusNumber</li>
        }
    </ul>
    <p>
        <span class="textButton">Pokaż wszystkie</span> | <span class="textButton">Ukryj wszystkie</span>
    </p>
</div>

@*<hr />

<div id="lineDetails">
    <p>
        Szczegóły linii:
    </p>
    <select class="form-control">
        <option>Linia: A, Trasa: Wojska Polskiego II &rarr; Dworzec Główny PKP</option>
        <option>50</option>
        <option>57</option>
        <option>61</option>
    </select>
</div>*@

<script>
    function showHideBuses(element, busNumber)
    {
        element.className = element.className === 'active' ? '' : 'active';
        for (var i = 0; i < busLines.length; i++)
            if (busLines[i].BusNumber === busNumber)
            {
                busLines[i].show = !busLines[i].show;
                if (busLines[i].show)
                    buses.show(busLines[i].BusNumber);
                else
                    buses.hide(busLines[i].BusNumber);
                //refreshBusLinesTiles();
                break;
            }
    }

    function ServerTime()
    {
        var self = this;

        var serverTime = Number(@Model.ServerTimeMilliseconds);

        var timeDifference = serverTime - new Date().getTime();

        self.now = function()
        {
            return new Date(new Date().getTime() + timeDifference);
        };
    }

    function BusStop(busStop)
    {
        var self = this;

        var marker = new google.maps.Marker(
        {
            icon: OrangeBusStopMarkerImage,
            map: map,
            optimized: false,
            position:
            {
                lat: busStop.Latitude,
                lng: busStop.Longitude
            },
            zIndex: 0
        });

        marker.addListener('click', function(e)
        {
            console.log('Bus stop clicked');
        });

        self.hide = function()
        {
            if (marker.getMap() != null)
                marker.setMap(null);
        };

        self.show = function()
        {
            if (marker.getMap() == null)
                marker.setMap(map);
        };
    };

    function BusStops()
    {
        var self = this;

        var busStops = [];

        self.hide = function()
        {
            for (var i = 0; i < busStops.length; i++)
                busStops[i].hide();
        };

        self.show = function()
        {
            for (var i = 0; i < busStops.length; i++)
                busStops[i].show();
        };

        var busStopsModel = @Html.Raw(Json.Encode(@Model.BusStops));
        for (var i = 0; i < busStopsModel.length; i++)
            busStops.push(new BusStop(busStopsModel[i]));
    }

    function RoutePolyline(busLineIndexParam, routeIndexParam)
    {
        var self = this;

        self.busLineIndex = busLineIndexParam;

        self.routeIndex = routeIndexParam;

        var points = busLines[self.busLineIndex].Routes[self.routeIndex].Points;

        var path = [];
        for (var i = 0; i < points.length; i++)
        {
            path.push(new google.maps.LatLng(points[i].Latitude, points[i].Longitude));
        }

        var polyline = new google.maps.Polyline(
        {
            map: map,
            path: path,
            //geodesic: true,
            strokeColor: '#FF6A00',
            strokeOpacity: 1,
            strokeWeight: 5,
        });

        self.hide = function()
        {
            if (polyline.getMap() != null)
                polyline.setMap(null);
        };

        self.show = function()
        {
            if (polyline.getMap() == null)
                polyline.setMap(map);
        };
    }

    function RoutePolylines()
    {
        var self = this;

        var routePolylines = [];

        self.add = function(busLineIndex, routeIndex)
        {
            if (self.get(busLineIndex, routeIndex).length == 0)
            {
                var routePolyline = new RoutePolyline(busLineIndex, routeIndex);
                routePolylines.push(routePolyline);
            }
        };

        self.removeAll = function()
        {
            for (var i = 0; i < routePolylines.length; i++)
                routePolylines[i].hide();
            routePolylines = [];
        };

        self.get = function(busLineIndex, routeIndex)
        {
            var result = [];
            for (var i = 0; i < routePolylines.length; i++)
                if (routePolylines[i].busLineIndex === busLineIndex && routePolylines[i].routeIndex === routeIndex)
                    result.push(routePolylines[i]);
            return result;
        };
    }

    function Bus(busNumberParam, pointsParam, startTimeOffsetParam, departureHoursParam, departureMinutesParam, busLineIndex, routeIndex, departureTimeIndex)
    {
        var self = this;

        self.busNumber = busNumberParam;

        self.points = pointsParam;

        var startTimeOffset = startTimeOffsetParam;

        self.departureHours = departureHoursParam;

        self.departureMinutes = departureMinutesParam;

        self.busLineIndex = busLineIndex;

        self.routeIndex = routeIndex;

        self.departureTimeIndex = departureTimeIndex;

        var marker = new google.maps.Marker(
        {
            label: self.busNumber,
            map: map,
            position:
            {
                lat: self.points[0].Latitude,
                lng: self.points[0].Longitude
            }
        });

        marker.addListener('click', function(e)
        {
            routePolylines.add(self.busLineIndex, self.routeIndex);
        });

        self.hide = function()
        {
            if (marker.getMap() != null)
                marker.setMap(null);
        };

        self.show = function()
        {
            if (marker.getMap() == null)
                marker.setMap(map);
        };

        var startTotalMilliseconds = serverTime.now().getTime();

        var getCurrentTimeOffset = function()
        {
            return serverTime.now().getTime() - startTotalMilliseconds + startTimeOffset;
        };

        var update = function()
        {
            var currentTimeOffset = getCurrentTimeOffset();
            if (currentTimeOffset > self.points[self.points.length - 1].TimeOffset)
            {
                marker.setMap(null);
                buses.remove(self);
            }
            else
            {
                for (var k = 0; k < self.points.length - 1; k++)
                {

                    if ((currentTimeOffset >= self.points[k].TimeOffset && currentTimeOffset < self.points[k + 1].TimeOffset))
                    {
                        var newPosition = getPositionBetweenTwoPoints(self.points[k], self.points[k + 1], currentTimeOffset);
                        marker.setPosition(newPosition);
                        break;
                    }
                }
                setTimeout(update, 100);
            }
        }

        update();
    }

    function Buses()
    {
        var self = this;

        var buses = [];

        self.add = function(busNumber, points, startTimeOffset, departureHours, departureMinutes, busLineIndex, routeIndex, departureTimeIndex)
        {
            if (self.get(busNumber, departureHours, departureMinutes).length == 0)
            {
                var bus = new Bus(busNumber, points, startTimeOffset, departureHours, departureMinutes, busLineIndex, routeIndex, departureTimeIndex);

                // Todo: getLine()
                for (var i = 0; i < busLines.length; i++)
                    if (busLines[i].BusNumber === busNumber && !busLines[i].show)
                    {
                        bus.hide();
                    }

                buses.push(bus);
            }
        };

        self.remove = function(bus)
        {
            buses.splice(buses.indexOf(bus), 1);
        };

        self.get = function(busNumber, departureHours, departureMinutes)
        {
            var result = [];
            for (var i = 0; i < buses.length; i++)
                if (buses[i].busNumber === busNumber &&
                    (departureHours == undefined || buses[i].departureHours === departureHours) &&
                    (departureMinutes == undefined || buses[i].departureMinutes === departureMinutes))
                    result.push(buses[i]);
            return result;
        };

        self.hide = function(busNumber)
        {
            var busesToHide = self.get(busNumber);
            for (var i = 0; i < busesToHide.length; i++)
                busesToHide[i].hide();
        };

        self.show = function(busNumber)
        {
            var busesToShow = self.get(busNumber);
            for (var i = 0; i < busesToShow.length; i++)
                busesToShow[i].show();
        };

        var update = function(fullMinute)
        {
            if (fullMinute === false || (fullMinute === true && serverTime.now().getSeconds() === 0))
            {
                var now = serverTime.now();
                for (var i = 0; i < busLines.length; i++)
                {
                    var busLine = busLines[i];
                    for (var j = 0; j < busLine.Routes.length; j++)
                    {
                        var route = busLine.Routes[j];
                        for (var k = 0; k < route.DepartureTimes.length; k++)
                        {
                            var departureTime = route.DepartureTimes[k];
                            var departureDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), departureTime.Hours, departureTime.Minutes, 0);
                            var arrivalDate = new Date(departureDate.getTime() + route.Points[route.Points.length - 1].TimeOffset);
                            if (now >= departureDate && now < arrivalDate)
                                self.add(busLine.BusNumber, route.Points, now - departureDate, departureTime.Hours, departureTime.Minutes, i, j, k);
                        }
                    }
                }
            }
            setTimeout(function()
            {
                update(true);
            }, 900);
        };

        update(false);
    }

    

    function getPositionBetweenTwoPoints(startPoint, endPoint, currentTimeOffset)
    {
        var latitudeDifference = endPoint.Latitude - startPoint.Latitude;
        var longitudeDifference = endPoint.Longitude - startPoint.Longitude;
        var timeRatio = (currentTimeOffset - startPoint.TimeOffset) / (endPoint.TimeOffset - startPoint.TimeOffset);
        var newPointLatitude = startPoint.Latitude + latitudeDifference * timeRatio;
        var newPointLongitude = startPoint.Longitude + longitudeDifference * timeRatio;
        return new google.maps.LatLng(newPointLatitude, newPointLongitude);
    }





    window.onload = function()
    {
        GrayBusStopMarkerImage = new google.maps.MarkerImage
        (
            '/Content/Images/gray_busstop.png',
            new google.maps.Size(24, 24),
            new google.maps.Point(0, 0),
            new google.maps.Point(12, 12)
        );

        OrangeBusStopMarkerImage = new google.maps.MarkerImage
        (
            '/Content/Images/orange_busstop2.png',
            new google.maps.Size(24, 24),
            new google.maps.Point(0, 0),
            new google.maps.Point(12, 12)
        );

        OrangeCircleMarkerImage = new google.maps.MarkerImage
        (
            '/Content/Images/orange_circle.png',
            new google.maps.Size(12, 12),
            new google.maps.Point(0, 0),
            new google.maps.Point(6, 6)
        );

        serverTime = new ServerTime();
        busStops = new BusStops();
        busLines = @Html.Raw(Json.Encode(@Model.BusLines));

        for (var i = 0; i < busLines.length; i++)
            busLines[i].show = true;
        //refreshBusLinesTiles();

        buses = new Buses();

        routePolylines = new RoutePolylines();

        map.addListener('click', function(e)
        {
            routePolylines.removeAll();
            //selectedLine.update(null);
        });
    }
</script>